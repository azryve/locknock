name: Release locknock

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'

    - name: Check out code
      uses: actions/checkout@v3
      
    - name: Get the version
      id: get_version
      run: echo "##[set-output name=version;]$(echo ${GITHUB_REF#refs/tags/})"
      shell: bash

    - name: Build binary cmd/locknock
      run: |
        CGO_ENABLED=0 GOOS=linux go build -o ./locknock ./cmd/locknock

    - name: Create Tarball of source
      run: |
        git archive --format tar.gz --output source-${{ steps.get_version.outputs.version }}.tar.gz HEAD

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          Release ${{ steps.get_version.outputs.version }}

    - name: Upload Binary to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./locknock
        asset_name: locknock
        asset_content_type: application/octet-stream

    - name: Upload Source Tarball to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./source-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: source-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip
